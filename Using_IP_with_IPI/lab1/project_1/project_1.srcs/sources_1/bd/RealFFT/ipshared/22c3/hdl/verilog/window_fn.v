// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module window_fn (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        indata_0_V_dout,
        indata_0_V_empty_n,
        indata_0_V_read,
        indata_1_V_dout,
        indata_1_V_empty_n,
        indata_1_V_read,
        outdata_0_V_din,
        outdata_0_V_full_n,
        outdata_0_V_write,
        outdata_1_V_din,
        outdata_1_V_full_n,
        outdata_1_V_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] indata_0_V_dout;
input   indata_0_V_empty_n;
output   indata_0_V_read;
input  [15:0] indata_1_V_dout;
input   indata_1_V_empty_n;
output   indata_1_V_read;
output  [15:0] outdata_0_V_din;
input   outdata_0_V_full_n;
output   outdata_0_V_write;
output  [15:0] outdata_1_V_din;
input   outdata_1_V_full_n;
output   outdata_1_V_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg indata_0_V_read;
reg indata_1_V_read;
reg outdata_0_V_write;
reg outdata_1_V_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] tmp_fu_158_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] coeff_tab1_0_address0;
reg    coeff_tab1_0_ce0;
wire   [14:0] coeff_tab1_0_q0;
wire   [8:0] coeff_tab1_1_address0;
reg    coeff_tab1_1_ce0;
wire   [14:0] coeff_tab1_1_q0;
reg    indata_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    indata_1_V_blk_n;
reg    outdata_0_V_blk_n;
reg    outdata_1_V_blk_n;
reg   [9:0] i9_reg_114;
wire   [9:0] tmp_3_fu_154_p1;
reg   [9:0] tmp_3_reg_220;
reg   [0:0] tmp_reg_225;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_225;
reg   [0:0] ap_reg_pp0_iter2_tmp_reg_225;
reg   [0:0] ap_reg_pp0_iter3_tmp_reg_225;
reg   [0:0] ap_reg_pp0_iter4_tmp_reg_225;
reg   [14:0] coeff_tab1_0_load_reg_229;
reg  signed [15:0] indata_0_V_read_reg_234;
reg   [14:0] coeff_tab1_1_load_reg_239;
reg  signed [15:0] indata_1_V_read_reg_244;
wire  signed [30:0] grp_fu_198_p2;
reg  signed [30:0] p_Val2_s_reg_269;
wire  signed [30:0] grp_fu_204_p2;
reg  signed [30:0] p_Val2_1_reg_274;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] ap_phi_mux_i9_phi_fu_118_p6;
wire   [63:0] newIndex1_fu_142_p1;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] tmp_2_fu_132_p4;
wire   [10:0] i9_cast_fu_128_p1;
wire   [10:0] i_1_1_fu_148_p2;
wire   [14:0] grp_fu_198_p1;
wire   [14:0] grp_fu_204_p1;
reg    grp_fu_198_ce;
reg    grp_fu_204_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [30:0] grp_fu_198_p10;
wire   [30:0] grp_fu_204_p10;
reg    ap_condition_111;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

window_fn_coeff_tcud #(
    .DataWidth( 15 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
coeff_tab1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab1_0_address0),
    .ce0(coeff_tab1_0_ce0),
    .q0(coeff_tab1_0_q0)
);

window_fn_coeff_tdEe #(
    .DataWidth( 15 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
coeff_tab1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab1_1_address0),
    .ce0(coeff_tab1_1_ce0),
    .q0(coeff_tab1_1_q0)
);

hls_real2xfft_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
hls_real2xfft_muleOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indata_0_V_read_reg_234),
    .din1(grp_fu_198_p1),
    .ce(grp_fu_198_ce),
    .dout(grp_fu_198_p2)
);

hls_real2xfft_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
hls_real2xfft_muleOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indata_1_V_read_reg_244),
    .din1(grp_fu_204_p1),
    .ce(grp_fu_204_ce),
    .dout(grp_fu_204_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter4_tmp_reg_225 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_225 == 1'd0))) begin
        i9_reg_114 <= tmp_3_reg_220;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_225 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i9_reg_114 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_reg_225 <= tmp_reg_225;
        coeff_tab1_0_load_reg_229 <= coeff_tab1_0_q0;
        coeff_tab1_1_load_reg_239 <= coeff_tab1_1_q0;
        indata_0_V_read_reg_234 <= indata_0_V_dout;
        indata_1_V_read_reg_244 <= indata_1_V_dout;
        tmp_reg_225 <= tmp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_tmp_reg_225 <= ap_reg_pp0_iter1_tmp_reg_225;
        ap_reg_pp0_iter3_tmp_reg_225 <= ap_reg_pp0_iter2_tmp_reg_225;
        ap_reg_pp0_iter4_tmp_reg_225 <= ap_reg_pp0_iter3_tmp_reg_225;
        p_Val2_1_reg_274 <= grp_fu_204_p2;
        p_Val2_s_reg_269 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_220 <= tmp_3_fu_154_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter4_tmp_reg_225 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_111)) begin
        if ((tmp_reg_225 == 1'd1)) begin
            ap_phi_mux_i9_phi_fu_118_p6 = 10'd0;
        end else if ((tmp_reg_225 == 1'd0)) begin
            ap_phi_mux_i9_phi_fu_118_p6 = tmp_3_reg_220;
        end else begin
            ap_phi_mux_i9_phi_fu_118_p6 = i9_reg_114;
        end
    end else begin
        ap_phi_mux_i9_phi_fu_118_p6 = i9_reg_114;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coeff_tab1_0_ce0 = 1'b1;
    end else begin
        coeff_tab1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coeff_tab1_1_ce0 = 1'b1;
    end else begin
        coeff_tab1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_198_ce = 1'b1;
    end else begin
        grp_fu_198_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_204_ce = 1'b1;
    end else begin
        grp_fu_204_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        indata_0_V_blk_n = indata_0_V_empty_n;
    end else begin
        indata_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indata_0_V_read = 1'b1;
    end else begin
        indata_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        indata_1_V_blk_n = indata_1_V_empty_n;
    end else begin
        indata_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indata_1_V_read = 1'b1;
    end else begin
        indata_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        outdata_0_V_blk_n = outdata_0_V_full_n;
    end else begin
        outdata_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        outdata_0_V_write = 1'b1;
    end else begin
        outdata_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        outdata_1_V_blk_n = outdata_1_V_full_n;
    end else begin
        outdata_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        outdata_1_V_write = 1'b1;
    end else begin
        outdata_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_111 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign coeff_tab1_0_address0 = newIndex1_fu_142_p1;

assign coeff_tab1_1_address0 = newIndex1_fu_142_p1;

assign grp_fu_198_p1 = grp_fu_198_p10;

assign grp_fu_198_p10 = coeff_tab1_0_load_reg_229;

assign grp_fu_204_p1 = grp_fu_204_p10;

assign grp_fu_204_p10 = coeff_tab1_1_load_reg_239;

assign i9_cast_fu_128_p1 = ap_phi_mux_i9_phi_fu_118_p6;

assign i_1_1_fu_148_p2 = (11'd2 + i9_cast_fu_128_p1);

assign newIndex1_fu_142_p1 = tmp_2_fu_132_p4;

assign outdata_0_V_din = {{p_Val2_s_reg_269[30:15]}};

assign outdata_1_V_din = {{p_Val2_1_reg_274[30:15]}};

assign start_out = real_start;

assign tmp_2_fu_132_p4 = {{ap_phi_mux_i9_phi_fu_118_p6[9:1]}};

assign tmp_3_fu_154_p1 = i_1_1_fu_148_p2[9:0];

assign tmp_fu_158_p2 = ((i_1_1_fu_148_p2 == 11'd1024) ? 1'b1 : 1'b0);

endmodule //window_fn
