-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sliding_win_1in2out_ap_fixed_1024_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dout_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_0_V_full_n : IN STD_LOGIC;
    dout_0_V_write : OUT STD_LOGIC;
    dout_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_1_V_full_n : IN STD_LOGIC;
    dout_1_V_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    din_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    din_V_V_TVALID : IN STD_LOGIC;
    din_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of sliding_win_1in2out_ap_fixed_1024_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal tmp_11_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal din_V_V_0_vld_out : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal din_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal din_V_V_0_vld_in : STD_LOGIC;
    signal din_V_V_0_ack_in : STD_LOGIC;
    signal din_V_V_0_ack_out : STD_LOGIC;
    signal din_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal din_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal din_V_V_0_sel_rd : STD_LOGIC := '0';
    signal din_V_V_0_sel_wr : STD_LOGIC := '0';
    signal din_V_V_0_sel : STD_LOGIC;
    signal din_V_V_0_load_A : STD_LOGIC;
    signal din_V_V_0_load_B : STD_LOGIC;
    signal din_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_V_V_0_state_cmp_full : STD_LOGIC;
    signal din_mem_idx : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    signal out_start_offset : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal win_mem_V_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal win_mem_V_1_ce0 : STD_LOGIC;
    signal win_mem_V_1_we0 : STD_LOGIC;
    signal win_mem_V_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal win_mem_V_1_ce1 : STD_LOGIC;
    signal win_mem_V_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_mem_V_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal win_mem_V_0_ce0 : STD_LOGIC;
    signal win_mem_V_0_we0 : STD_LOGIC;
    signal win_mem_V_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal win_mem_V_0_ce1 : STD_LOGIC;
    signal win_mem_V_0_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal din_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dout_0_V_blk_n : STD_LOGIC;
    signal dout_1_V_blk_n : STD_LOGIC;
    signal i_reg_188 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_210_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_9_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_9_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_idx_fu_214_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_idx_reg_376 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter1_out_idx_reg_376 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex3_reg_381 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_pp0_iter1_newIndex3_reg_381 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_262_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_11_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_11_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_11_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_278_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal win_mem_V_load_phi_fu_354_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_mem_V_load_phi_reg_423 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_mem_V_load_1_phi_fu_361_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_mem_V_load_1_phi_reg_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_192_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex2_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex5_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex4_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal storemerge_fu_310_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_cast_fu_242_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i33_cast_fu_202_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_fu_256_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal newIndex1_fu_282_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_idx_cast_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_332_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal newIndex_fu_338_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_178 : BOOLEAN;

    component sliding_win_1in2obkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    win_mem_V_1_U : component sliding_win_1in2obkb
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => win_mem_V_1_address0,
        ce0 => win_mem_V_1_ce0,
        we0 => win_mem_V_1_we0,
        d0 => din_V_V_0_data_out,
        address1 => win_mem_V_1_address1,
        ce1 => win_mem_V_1_ce1,
        q1 => win_mem_V_1_q1);

    win_mem_V_0_U : component sliding_win_1in2obkb
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => win_mem_V_0_address0,
        ce0 => win_mem_V_0_ce0,
        we0 => win_mem_V_0_we0,
        d0 => din_V_V_0_data_out,
        address1 => win_mem_V_0_address1,
        ce1 => win_mem_V_0_ce1,
        q1 => win_mem_V_0_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_tmp_11_reg_395 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    din_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                din_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((din_V_V_0_ack_out = ap_const_logic_1) and (din_V_V_0_vld_out = ap_const_logic_1))) then 
                                        din_V_V_0_sel_rd <= not(din_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                din_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((din_V_V_0_ack_in = ap_const_logic_1) and (din_V_V_0_vld_in = ap_const_logic_1))) then 
                                        din_V_V_0_sel_wr <= not(din_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    din_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                din_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((din_V_V_0_state = ap_const_lv2_2) and (din_V_V_0_vld_in = ap_const_logic_0)) or ((din_V_V_0_state = ap_const_lv2_3) and (din_V_V_0_vld_in = ap_const_logic_0) and (din_V_V_0_ack_out = ap_const_logic_1)))) then 
                    din_V_V_0_state <= ap_const_lv2_2;
                elsif ((((din_V_V_0_state = ap_const_lv2_1) and (din_V_V_0_ack_out = ap_const_logic_0)) or ((din_V_V_0_state = ap_const_lv2_3) and (din_V_V_0_ack_out = ap_const_logic_0) and (din_V_V_0_vld_in = ap_const_logic_1)))) then 
                    din_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((din_V_V_0_vld_in = ap_const_logic_0) and (din_V_V_0_ack_out = ap_const_logic_1))) and not(((din_V_V_0_ack_out = ap_const_logic_0) and (din_V_V_0_vld_in = ap_const_logic_1))) and (din_V_V_0_state = ap_const_lv2_3)) or ((din_V_V_0_state = ap_const_lv2_1) and (din_V_V_0_ack_out = ap_const_logic_1)) or ((din_V_V_0_state = ap_const_lv2_2) and (din_V_V_0_vld_in = ap_const_logic_1)))) then 
                    din_V_V_0_state <= ap_const_lv2_3;
                else 
                    din_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_reg_395 = ap_const_lv1_0))) then 
                i_reg_188 <= tmp_10_reg_390;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_11_reg_395 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_reg_188 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_newIndex3_reg_381 <= newIndex3_reg_381;
                ap_reg_pp0_iter1_out_idx_reg_376 <= out_idx_reg_376;
                ap_reg_pp0_iter1_tmp_11_reg_395 <= tmp_11_reg_395;
                newIndex3_reg_381 <= out_idx_fu_214_p2(9 downto 1);
                out_idx_reg_376 <= out_idx_fu_214_p2;
                tmp_11_reg_395 <= i_1_fu_256_p2(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_tmp_11_reg_395 <= ap_reg_pp0_iter1_tmp_11_reg_395;
                ap_reg_pp0_iter3_tmp_11_reg_395 <= ap_reg_pp0_iter2_tmp_11_reg_395;
                win_mem_V_load_1_phi_reg_428 <= win_mem_V_load_1_phi_fu_361_p3;
                win_mem_V_load_phi_reg_423 <= win_mem_V_load_phi_fu_354_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_V_0_load_A = ap_const_logic_1)) then
                din_V_V_0_payload_A <= din_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_V_0_load_B = ap_const_logic_1)) then
                din_V_V_0_payload_B <= din_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                din_mem_idx <= storemerge_fu_310_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_fu_230_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    out_start_offset(9) <= tmp_9_cast_cast_fu_242_p3(9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_10_reg_390 <= tmp_10_fu_262_p1;
            end if;
        end if;
    end process;
    out_start_offset(8 downto 0) <= "000000000";
    tmp_9_reg_370(0) <= '0';
    ap_reg_pp0_iter1_tmp_9_reg_370(0) <= '0';
    ap_reg_pp0_iter2_tmp_9_reg_370(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, din_V_V_0_vld_out, ap_enable_reg_pp0_iter1, dout_0_V_full_n, dout_1_V_full_n, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((dout_1_V_full_n = ap_const_logic_0) or (dout_0_V_full_n = ap_const_logic_0))) or ((din_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, din_V_V_0_vld_out, ap_enable_reg_pp0_iter1, dout_0_V_full_n, dout_1_V_full_n, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((dout_1_V_full_n = ap_const_logic_0) or (dout_0_V_full_n = ap_const_logic_0))) or ((din_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, din_V_V_0_vld_out, ap_enable_reg_pp0_iter1, dout_0_V_full_n, dout_1_V_full_n, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((dout_1_V_full_n = ap_const_logic_0) or (dout_0_V_full_n = ap_const_logic_0))) or ((din_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(din_V_V_0_vld_out)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (din_V_V_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(dout_0_V_full_n, dout_1_V_full_n)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((dout_1_V_full_n = ap_const_logic_0) or (dout_0_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_178_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_178 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_reg_pp0_iter3_tmp_11_reg_395)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_tmp_11_reg_395 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_192_p6_assign_proc : process(i_reg_188, tmp_10_reg_390, tmp_11_reg_395, ap_condition_178)
    begin
        if ((ap_const_boolean_1 = ap_condition_178)) then
            if ((tmp_11_reg_395 = ap_const_lv1_1)) then 
                ap_phi_mux_i_phi_fu_192_p6 <= ap_const_lv10_0;
            elsif ((tmp_11_reg_395 = ap_const_lv1_0)) then 
                ap_phi_mux_i_phi_fu_192_p6 <= tmp_10_reg_390;
            else 
                ap_phi_mux_i_phi_fu_192_p6 <= i_reg_188;
            end if;
        else 
            ap_phi_mux_i_phi_fu_192_p6 <= i_reg_188;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to3)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    din_V_V_0_ack_in <= din_V_V_0_state(1);

    din_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            din_V_V_0_ack_out <= ap_const_logic_1;
        else 
            din_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    din_V_V_0_data_out_assign_proc : process(din_V_V_0_payload_A, din_V_V_0_payload_B, din_V_V_0_sel)
    begin
        if ((din_V_V_0_sel = ap_const_logic_1)) then 
            din_V_V_0_data_out <= din_V_V_0_payload_B;
        else 
            din_V_V_0_data_out <= din_V_V_0_payload_A;
        end if; 
    end process;

    din_V_V_0_load_A <= (not(din_V_V_0_sel_wr) and din_V_V_0_state_cmp_full);
    din_V_V_0_load_B <= (din_V_V_0_state_cmp_full and din_V_V_0_sel_wr);
    din_V_V_0_sel <= din_V_V_0_sel_rd;
    din_V_V_0_state_cmp_full <= '0' when (din_V_V_0_state = ap_const_lv2_1) else '1';
    din_V_V_0_vld_in <= din_V_V_TVALID;
    din_V_V_0_vld_out <= din_V_V_0_state(0);

    din_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, din_V_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            din_V_V_TDATA_blk_n <= din_V_V_0_state(0);
        else 
            din_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_V_V_TREADY <= din_V_V_0_state(1);

    dout_0_V_blk_n_assign_proc : process(dout_0_V_full_n, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dout_0_V_blk_n <= dout_0_V_full_n;
        else 
            dout_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_0_V_din <= win_mem_V_load_phi_reg_423;

    dout_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            dout_0_V_write <= ap_const_logic_1;
        else 
            dout_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_1_V_blk_n_assign_proc : process(dout_1_V_full_n, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dout_1_V_blk_n <= dout_1_V_full_n;
        else 
            dout_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_1_V_din <= win_mem_V_load_1_phi_reg_428;

    dout_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            dout_1_V_write <= ap_const_logic_1;
        else 
            dout_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i33_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_192_p6),11));
    i_1_fu_256_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(i33_cast_fu_202_p1));

    internal_ap_ready_assign_proc : process(tmp_11_fu_266_p3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_11_fu_266_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    newIndex1_fu_282_p4 <= din_mem_idx(31 downto 1);
    newIndex2_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex1_fu_282_p4),64));
    newIndex4_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_338_p4),64));
    newIndex5_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_newIndex3_reg_381),64));
    newIndex_fu_338_p4 <= tmp_4_fu_332_p2(10 downto 1);
    out_idx_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_out_idx_reg_376),11));
    out_idx_fu_214_p2 <= std_logic_vector(unsigned(out_start_offset) + unsigned(ap_phi_mux_i_phi_fu_192_p6));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_310_p3 <= 
        ap_const_lv32_0 when (tmp_s_fu_298_p2(0) = '1') else 
        tmp_5_fu_304_p2;
    tmp_10_fu_262_p1 <= i_1_fu_256_p2(10 - 1 downto 0);
    tmp_11_fu_266_p3 <= i_1_fu_256_p2(10 downto 10);
    tmp_4_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(out_idx_cast_fu_324_p1));
    tmp_5_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(din_mem_idx));
    tmp_6_fu_278_p1 <= din_mem_idx(1 - 1 downto 0);
    tmp_7_fu_230_p2 <= "1" when (ap_phi_mux_i_phi_fu_192_p6 = ap_const_lv10_3FE) else "0";
    tmp_8_fu_236_p2 <= "1" when (out_start_offset = ap_const_lv10_0) else "0";
    tmp_9_cast_cast_fu_242_p3 <= 
        ap_const_lv10_200 when (tmp_8_fu_236_p2(0) = '1') else 
        ap_const_lv10_0;
    tmp_9_fu_210_p1 <= out_start_offset(1 - 1 downto 0);
    tmp_s_fu_298_p2 <= "1" when (din_mem_idx = ap_const_lv32_3FF) else "0";
    win_mem_V_0_address0 <= newIndex2_fu_292_p1(9 - 1 downto 0);

    win_mem_V_0_address1_assign_proc : process(ap_block_pp0_stage0, ap_reg_pp0_iter1_tmp_9_reg_370, ap_enable_reg_pp0_iter2, newIndex5_fu_327_p1, newIndex4_fu_348_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_1)) then 
                win_mem_V_0_address1 <= newIndex4_fu_348_p1(9 - 1 downto 0);
            elsif ((ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_0)) then 
                win_mem_V_0_address1 <= newIndex5_fu_327_p1(9 - 1 downto 0);
            else 
                win_mem_V_0_address1 <= "XXXXXXXXX";
            end if;
        else 
            win_mem_V_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    win_mem_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            win_mem_V_0_ce0 <= ap_const_logic_1;
        else 
            win_mem_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    win_mem_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_tmp_9_reg_370, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_0)))) then 
            win_mem_V_0_ce1 <= ap_const_logic_1;
        else 
            win_mem_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    win_mem_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_6_fu_278_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_6_fu_278_p1 = ap_const_lv1_0))) then 
            win_mem_V_0_we0 <= ap_const_logic_1;
        else 
            win_mem_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    win_mem_V_1_address0 <= newIndex2_fu_292_p1(9 - 1 downto 0);

    win_mem_V_1_address1_assign_proc : process(ap_block_pp0_stage0, ap_reg_pp0_iter1_tmp_9_reg_370, ap_enable_reg_pp0_iter2, newIndex5_fu_327_p1, newIndex4_fu_348_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_0)) then 
                win_mem_V_1_address1 <= newIndex4_fu_348_p1(9 - 1 downto 0);
            elsif ((ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_1)) then 
                win_mem_V_1_address1 <= newIndex5_fu_327_p1(9 - 1 downto 0);
            else 
                win_mem_V_1_address1 <= "XXXXXXXXX";
            end if;
        else 
            win_mem_V_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    win_mem_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            win_mem_V_1_ce0 <= ap_const_logic_1;
        else 
            win_mem_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    win_mem_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_tmp_9_reg_370, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_tmp_9_reg_370 = ap_const_lv1_0)))) then 
            win_mem_V_1_ce1 <= ap_const_logic_1;
        else 
            win_mem_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    win_mem_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_6_fu_278_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_6_fu_278_p1 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            win_mem_V_1_we0 <= ap_const_logic_1;
        else 
            win_mem_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    win_mem_V_load_1_phi_fu_361_p3 <= 
        win_mem_V_0_q1 when (ap_reg_pp0_iter2_tmp_9_reg_370(0) = '1') else 
        win_mem_V_1_q1;
    win_mem_V_load_phi_fu_354_p3 <= 
        win_mem_V_1_q1 when (ap_reg_pp0_iter2_tmp_9_reg_370(0) = '1') else 
        win_mem_V_0_q1;
end behav;
