// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_realfft_be_rev_real_hi_proc88 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        real_spectrum_hi_buf_i_0_address0,
        real_spectrum_hi_buf_i_0_ce0,
        real_spectrum_hi_buf_i_0_q0,
        real_spectrum_hi_buf_i_1_address0,
        real_spectrum_hi_buf_i_1_ce0,
        real_spectrum_hi_buf_i_1_q0,
        real_spectrum_hi_V_M_real_V_din,
        real_spectrum_hi_V_M_real_V_full_n,
        real_spectrum_hi_V_M_real_V_write,
        real_spectrum_hi_V_M_imag_V_din,
        real_spectrum_hi_V_M_imag_V_full_n,
        real_spectrum_hi_V_M_imag_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] real_spectrum_hi_buf_i_0_address0;
output   real_spectrum_hi_buf_i_0_ce0;
input  [15:0] real_spectrum_hi_buf_i_0_q0;
output  [7:0] real_spectrum_hi_buf_i_1_address0;
output   real_spectrum_hi_buf_i_1_ce0;
input  [15:0] real_spectrum_hi_buf_i_1_q0;
output  [15:0] real_spectrum_hi_V_M_real_V_din;
input   real_spectrum_hi_V_M_real_V_full_n;
output   real_spectrum_hi_V_M_real_V_write;
output  [15:0] real_spectrum_hi_V_M_imag_V_din;
input   real_spectrum_hi_V_M_imag_V_full_n;
output   real_spectrum_hi_V_M_imag_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg real_spectrum_hi_buf_i_0_ce0;
reg real_spectrum_hi_buf_i_1_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    real_spectrum_hi_V_M_real_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1300_i_reg_135;
reg   [0:0] ap_reg_pp0_iter1_exitcond1300_i_reg_135;
reg    real_spectrum_hi_V_M_imag_V_blk_n;
reg   [8:0] i3_0_i_reg_106;
wire   [0:0] exitcond1300_i_fu_117_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    real_spectrum_hi_V_M_real_V1_status;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_123_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_M_real_V_reg_154;
reg   [15:0] tmp_M_imag_V_reg_159;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] tmp_4_fu_129_p1;
reg    real_spectrum_hi_V_M_real_V1_update;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i3_0_i_reg_106 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1300_i_fu_117_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i3_0_i_reg_106 <= i_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond1300_i_reg_135 <= exitcond1300_i_reg_135;
        exitcond1300_i_reg_135 <= exitcond1300_i_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1300_i_reg_135 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_M_imag_V_reg_159 <= real_spectrum_hi_buf_i_1_q0;
        tmp_M_real_V_reg_154 <= real_spectrum_hi_buf_i_0_q0;
    end
end

always @ (*) begin
    if ((exitcond1300_i_fu_117_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        real_spectrum_hi_V_M_imag_V_blk_n = real_spectrum_hi_V_M_imag_V_full_n;
    end else begin
        real_spectrum_hi_V_M_imag_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        real_spectrum_hi_V_M_real_V1_update = 1'b1;
    end else begin
        real_spectrum_hi_V_M_real_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        real_spectrum_hi_V_M_real_V_blk_n = real_spectrum_hi_V_M_real_V_full_n;
    end else begin
        real_spectrum_hi_V_M_real_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        real_spectrum_hi_buf_i_0_ce0 = 1'b1;
    end else begin
        real_spectrum_hi_buf_i_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        real_spectrum_hi_buf_i_1_ce0 = 1'b1;
    end else begin
        real_spectrum_hi_buf_i_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1300_i_fu_117_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond1300_i_fu_117_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (real_spectrum_hi_V_M_real_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (real_spectrum_hi_V_M_real_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (real_spectrum_hi_V_M_real_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_reg_pp0_iter1_exitcond1300_i_reg_135 == 1'd0) & (real_spectrum_hi_V_M_real_V1_status == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1300_i_fu_117_p2 = ((i3_0_i_reg_106 == 9'd256) ? 1'b1 : 1'b0);

assign i_fu_123_p2 = (i3_0_i_reg_106 + 9'd1);

assign real_spectrum_hi_V_M_imag_V_din = tmp_M_imag_V_reg_159;

assign real_spectrum_hi_V_M_imag_V_write = real_spectrum_hi_V_M_real_V1_update;

assign real_spectrum_hi_V_M_real_V1_status = (real_spectrum_hi_V_M_real_V_full_n & real_spectrum_hi_V_M_imag_V_full_n);

assign real_spectrum_hi_V_M_real_V_din = tmp_M_real_V_reg_154;

assign real_spectrum_hi_V_M_real_V_write = real_spectrum_hi_V_M_real_V1_update;

assign real_spectrum_hi_buf_i_0_address0 = tmp_4_fu_129_p1;

assign real_spectrum_hi_buf_i_1_address0 = tmp_4_fu_129_p1;

assign tmp_4_fu_129_p1 = i3_0_i_reg_106;

endmodule //Loop_realfft_be_rev_real_hi_proc88
