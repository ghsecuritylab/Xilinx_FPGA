-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_realfft_be_stream_output_proc89 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dout_TREADY : IN STD_LOGIC;
    dout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_TVALID : OUT STD_LOGIC;
    dout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    real_spectrum_lo_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_lo_V_M_real_V_empty_n : IN STD_LOGIC;
    real_spectrum_lo_V_M_real_V_read : OUT STD_LOGIC;
    real_spectrum_lo_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_lo_V_M_imag_V_empty_n : IN STD_LOGIC;
    real_spectrum_lo_V_M_imag_V_read : OUT STD_LOGIC;
    real_spectrum_hi_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_hi_V_M_real_V_empty_n : IN STD_LOGIC;
    real_spectrum_hi_V_M_real_V_read : OUT STD_LOGIC;
    real_spectrum_hi_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_hi_V_M_imag_V_empty_n : IN STD_LOGIC;
    real_spectrum_hi_V_M_imag_V_read : OUT STD_LOGIC );
end;


architecture behav of Loop_realfft_be_stream_output_proc89 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dout_val_last_V_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal real_spectrum_lo_V_M_real_V0_status : STD_LOGIC;
    signal tmp_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal real_spectrum_hi_V_M_real_V0_status : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal dout_V_data_1_ack_in : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal dout_V_last_V_1_ack_in : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dout_V_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dout_V_data_1_vld_in : STD_LOGIC;
    signal dout_V_data_1_vld_out : STD_LOGIC;
    signal dout_V_data_1_ack_out : STD_LOGIC;
    signal dout_V_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dout_V_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dout_V_data_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_data_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_data_1_sel : STD_LOGIC;
    signal dout_V_data_1_load_A : STD_LOGIC;
    signal dout_V_data_1_load_B : STD_LOGIC;
    signal dout_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_data_1_state_cmp_full : STD_LOGIC;
    signal dout_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_vld_in : STD_LOGIC;
    signal dout_V_last_V_1_vld_out : STD_LOGIC;
    signal dout_V_last_V_1_ack_out : STD_LOGIC;
    signal dout_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_last_V_1_sel : STD_LOGIC;
    signal dout_V_last_V_1_load_A : STD_LOGIC;
    signal dout_V_last_V_1_load_B : STD_LOGIC;
    signal dout_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal dout_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal real_spectrum_lo_V_M_real_V_blk_n : STD_LOGIC;
    signal real_spectrum_lo_V_M_imag_V_blk_n : STD_LOGIC;
    signal real_spectrum_hi_V_M_real_V_blk_n : STD_LOGIC;
    signal real_spectrum_hi_V_M_imag_V_blk_n : STD_LOGIC;
    signal i4_0_i1_reg_136 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_176_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_223 : STD_LOGIC_VECTOR (8 downto 0);
    signal dout_val_last_V_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_dout_val_last_V_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_1_fu_208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_i4_0_i1_phi_fu_140_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_159 : STD_LOGIC_VECTOR (15 downto 0);
    signal real_spectrum_lo_V_M_real_V0_update : STD_LOGIC;
    signal real_spectrum_hi_V_M_real_V0_update : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_210 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_dout_val_last_V_reg_228 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_data_1_ack_out = ap_const_logic_1) and (dout_V_data_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_data_1_sel_rd <= not(dout_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_data_1_vld_in = ap_const_logic_1) and (dout_V_data_1_ack_in = ap_const_logic_1))) then 
                                        dout_V_data_1_sel_wr <= not(dout_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_data_1_state = ap_const_lv2_3) and (dout_V_data_1_vld_in = ap_const_logic_0) and (dout_V_data_1_ack_out = ap_const_logic_1)) or ((dout_V_data_1_state = ap_const_lv2_2) and (dout_V_data_1_vld_in = ap_const_logic_0)))) then 
                    dout_V_data_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_data_1_state = ap_const_lv2_3) and (dout_V_data_1_ack_out = ap_const_logic_0) and (dout_V_data_1_vld_in = ap_const_logic_1)) or ((dout_V_data_1_state = ap_const_lv2_1) and (dout_V_data_1_ack_out = ap_const_logic_0)))) then 
                    dout_V_data_1_state <= ap_const_lv2_1;
                elsif ((((dout_V_data_1_state = ap_const_lv2_1) and (dout_V_data_1_ack_out = ap_const_logic_1)) or ((dout_V_data_1_state = ap_const_lv2_2) and (dout_V_data_1_vld_in = ap_const_logic_1)) or (not(((dout_V_data_1_vld_in = ap_const_logic_0) and (dout_V_data_1_ack_out = ap_const_logic_1))) and not(((dout_V_data_1_ack_out = ap_const_logic_0) and (dout_V_data_1_vld_in = ap_const_logic_1))) and (dout_V_data_1_state = ap_const_lv2_3)))) then 
                    dout_V_data_1_state <= ap_const_lv2_3;
                else 
                    dout_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_last_V_1_ack_out = ap_const_logic_1) and (dout_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_last_V_1_sel_rd <= not(dout_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_last_V_1_ack_in = ap_const_logic_1) and (dout_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        dout_V_last_V_1_sel_wr <= not(dout_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_last_V_1_state = ap_const_lv2_2) and (dout_V_last_V_1_vld_in = ap_const_logic_0)) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_V_last_V_1_vld_in = ap_const_logic_0) and (dout_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_last_V_1_state = ap_const_lv2_1) and (dout_V_last_V_1_ack_out = ap_const_logic_0)) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_V_last_V_1_ack_out = ap_const_logic_0) and (dout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_V_last_V_1_vld_in = ap_const_logic_0) and (dout_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dout_V_last_V_1_ack_out = ap_const_logic_0) and (dout_V_last_V_1_vld_in = ap_const_logic_1))) and (dout_V_last_V_1_state = ap_const_lv2_3)) or ((dout_V_last_V_1_state = ap_const_lv2_1) and (dout_V_last_V_1_ack_out = ap_const_logic_1)) or ((dout_V_last_V_1_state = ap_const_lv2_2) and (dout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i4_0_i1_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_reg_228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i4_0_i1_reg_136 <= i_reg_223;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_reg_228 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i4_0_i1_reg_136 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_dout_val_last_V_reg_228 <= dout_val_last_V_reg_228;
                dout_val_last_V_reg_228 <= dout_val_last_V_fu_182_p2;
                tmp_reg_219 <= ap_phi_mux_i4_0_i1_phi_fu_140_p6(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_data_1_load_A = ap_const_logic_1)) then
                dout_V_data_1_payload_A <= tmp_data_1_fu_208_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_data_1_load_B = ap_const_logic_1)) then
                dout_V_data_1_payload_B <= tmp_data_1_fu_208_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_last_V_1_load_A = ap_const_logic_1)) then
                dout_V_last_V_1_payload_A <= dout_val_last_V_reg_228;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_last_V_1_load_B = ap_const_logic_1)) then
                dout_V_last_V_1_payload_B <= dout_val_last_V_reg_228;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_223 <= i_fu_176_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, real_spectrum_lo_V_M_real_V0_status, tmp_reg_219, real_spectrum_hi_V_M_real_V0_status, dout_V_data_1_ack_in, ap_enable_reg_pp0_iter1, dout_V_last_V_1_ack_in, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dout_V_last_V_1_ack_in = ap_const_logic_0) or (dout_V_data_1_ack_in = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((real_spectrum_hi_V_M_real_V0_status = ap_const_logic_0) and (tmp_reg_219 = ap_const_lv1_1)) or ((tmp_reg_219 = ap_const_lv1_0) and (real_spectrum_lo_V_M_real_V0_status = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, real_spectrum_lo_V_M_real_V0_status, tmp_reg_219, real_spectrum_hi_V_M_real_V0_status, dout_V_data_1_ack_in, ap_enable_reg_pp0_iter1, dout_V_last_V_1_ack_in, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dout_V_last_V_1_ack_in = ap_const_logic_0) or (dout_V_data_1_ack_in = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dout_V_data_1_ack_in = ap_const_logic_0) or ((real_spectrum_hi_V_M_real_V0_status = ap_const_logic_0) and (tmp_reg_219 = ap_const_lv1_1)) or ((tmp_reg_219 = ap_const_lv1_0) and (real_spectrum_lo_V_M_real_V0_status = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, real_spectrum_lo_V_M_real_V0_status, tmp_reg_219, real_spectrum_hi_V_M_real_V0_status, dout_V_data_1_ack_in, ap_enable_reg_pp0_iter1, dout_V_last_V_1_ack_in, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dout_V_last_V_1_ack_in = ap_const_logic_0) or (dout_V_data_1_ack_in = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dout_V_data_1_ack_in = ap_const_logic_0) or ((real_spectrum_hi_V_M_real_V0_status = ap_const_logic_0) and (tmp_reg_219 = ap_const_lv1_1)) or ((tmp_reg_219 = ap_const_lv1_0) and (real_spectrum_lo_V_M_real_V0_status = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(real_spectrum_lo_V_M_real_V0_status, tmp_reg_219, real_spectrum_hi_V_M_real_V0_status)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((real_spectrum_hi_V_M_real_V0_status = ap_const_logic_0) and (tmp_reg_219 = ap_const_lv1_1)) or ((tmp_reg_219 = ap_const_lv1_0) and (real_spectrum_lo_V_M_real_V0_status = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(dout_V_data_1_ack_in, dout_V_last_V_1_ack_in)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((dout_V_last_V_1_ack_in = ap_const_logic_0) or (dout_V_data_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_210_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_210 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_dout_val_last_V_reg_228)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_dout_val_last_V_reg_228 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i4_0_i1_phi_fu_140_p6_assign_proc : process(i4_0_i1_reg_136, i_reg_223, dout_val_last_V_reg_228, ap_condition_210)
    begin
        if ((ap_const_boolean_1 = ap_condition_210)) then
            if ((dout_val_last_V_reg_228 = ap_const_lv1_1)) then 
                ap_phi_mux_i4_0_i1_phi_fu_140_p6 <= ap_const_lv9_0;
            elsif ((dout_val_last_V_reg_228 = ap_const_lv1_0)) then 
                ap_phi_mux_i4_0_i1_phi_fu_140_p6 <= i_reg_223;
            else 
                ap_phi_mux_i4_0_i1_phi_fu_140_p6 <= i4_0_i1_reg_136;
            end if;
        else 
            ap_phi_mux_i4_0_i1_phi_fu_140_p6 <= i4_0_i1_reg_136;
        end if; 
    end process;


    ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4_assign_proc : process(tmp_reg_219, real_spectrum_lo_V_M_imag_V_dout, real_spectrum_hi_V_M_imag_V_dout, ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_150, ap_condition_210)
    begin
        if ((ap_const_boolean_1 = ap_condition_210)) then
            if ((tmp_reg_219 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4 <= real_spectrum_hi_V_M_imag_V_dout;
            elsif ((tmp_reg_219 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4 <= real_spectrum_lo_V_M_imag_V_dout;
            else 
                ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4 <= ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_150;
            end if;
        else 
            ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4 <= ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_150;
        end if; 
    end process;


    ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4_assign_proc : process(tmp_reg_219, real_spectrum_lo_V_M_real_V_dout, real_spectrum_hi_V_M_real_V_dout, ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_159, ap_condition_210)
    begin
        if ((ap_const_boolean_1 = ap_condition_210)) then
            if ((tmp_reg_219 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4 <= real_spectrum_hi_V_M_real_V_dout;
            elsif ((tmp_reg_219 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4 <= real_spectrum_lo_V_M_real_V_dout;
            else 
                ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4 <= ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_159;
            end if;
        else 
            ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4 <= ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_159;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_150 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_159 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(dout_val_last_V_fu_182_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_fu_182_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    dout_TDATA <= dout_V_data_1_data_out;

    dout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, dout_V_data_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dout_TDATA_blk_n <= dout_V_data_1_state(1);
        else 
            dout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_TLAST <= dout_V_last_V_1_data_out;
    dout_TVALID <= dout_V_last_V_1_state(0);
    dout_V_data_1_ack_in <= dout_V_data_1_state(1);
    dout_V_data_1_ack_out <= dout_TREADY;

    dout_V_data_1_data_out_assign_proc : process(dout_V_data_1_payload_A, dout_V_data_1_payload_B, dout_V_data_1_sel)
    begin
        if ((dout_V_data_1_sel = ap_const_logic_1)) then 
            dout_V_data_1_data_out <= dout_V_data_1_payload_B;
        else 
            dout_V_data_1_data_out <= dout_V_data_1_payload_A;
        end if; 
    end process;

    dout_V_data_1_load_A <= (not(dout_V_data_1_sel_wr) and dout_V_data_1_state_cmp_full);
    dout_V_data_1_load_B <= (dout_V_data_1_state_cmp_full and dout_V_data_1_sel_wr);
    dout_V_data_1_sel <= dout_V_data_1_sel_rd;
    dout_V_data_1_state_cmp_full <= '0' when (dout_V_data_1_state = ap_const_lv2_1) else '1';

    dout_V_data_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_V_data_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_data_1_vld_out <= dout_V_data_1_state(0);
    dout_V_last_V_1_ack_in <= dout_V_last_V_1_state(1);
    dout_V_last_V_1_ack_out <= dout_TREADY;

    dout_V_last_V_1_data_out_assign_proc : process(dout_V_last_V_1_payload_A, dout_V_last_V_1_payload_B, dout_V_last_V_1_sel)
    begin
        if ((dout_V_last_V_1_sel = ap_const_logic_1)) then 
            dout_V_last_V_1_data_out <= dout_V_last_V_1_payload_B;
        else 
            dout_V_last_V_1_data_out <= dout_V_last_V_1_payload_A;
        end if; 
    end process;

    dout_V_last_V_1_load_A <= (not(dout_V_last_V_1_sel_wr) and dout_V_last_V_1_state_cmp_full);
    dout_V_last_V_1_load_B <= (dout_V_last_V_1_state_cmp_full and dout_V_last_V_1_sel_wr);
    dout_V_last_V_1_sel <= dout_V_last_V_1_sel_rd;
    dout_V_last_V_1_state_cmp_full <= '0' when (dout_V_last_V_1_state = ap_const_lv2_1) else '1';

    dout_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_last_V_1_vld_out <= dout_V_last_V_1_state(0);
    dout_val_last_V_fu_182_p2 <= "1" when (ap_phi_mux_i4_0_i1_phi_fu_140_p6 = ap_const_lv9_1FF) else "0";
    i_fu_176_p2 <= std_logic_vector(unsigned(ap_phi_mux_i4_0_i1_phi_fu_140_p6) + unsigned(ap_const_lv9_1));

    real_spectrum_hi_V_M_imag_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_219, ap_enable_reg_pp0_iter1, real_spectrum_hi_V_M_imag_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_219 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_imag_V_blk_n <= real_spectrum_hi_V_M_imag_V_empty_n;
        else 
            real_spectrum_hi_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    real_spectrum_hi_V_M_imag_V_read <= real_spectrum_hi_V_M_real_V0_update;
    real_spectrum_hi_V_M_real_V0_status <= (real_spectrum_hi_V_M_real_V_empty_n and real_spectrum_hi_V_M_imag_V_empty_n);

    real_spectrum_hi_V_M_real_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_219, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_219 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_real_V0_update <= ap_const_logic_1;
        else 
            real_spectrum_hi_V_M_real_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_hi_V_M_real_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_219, ap_enable_reg_pp0_iter1, real_spectrum_hi_V_M_real_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_219 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_real_V_blk_n <= real_spectrum_hi_V_M_real_V_empty_n;
        else 
            real_spectrum_hi_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    real_spectrum_hi_V_M_real_V_read <= real_spectrum_hi_V_M_real_V0_update;

    real_spectrum_lo_V_M_imag_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_219, ap_enable_reg_pp0_iter1, real_spectrum_lo_V_M_imag_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_imag_V_blk_n <= real_spectrum_lo_V_M_imag_V_empty_n;
        else 
            real_spectrum_lo_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    real_spectrum_lo_V_M_imag_V_read <= real_spectrum_lo_V_M_real_V0_update;
    real_spectrum_lo_V_M_real_V0_status <= (real_spectrum_lo_V_M_real_V_empty_n and real_spectrum_lo_V_M_imag_V_empty_n);

    real_spectrum_lo_V_M_real_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_219, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_219 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_real_V0_update <= ap_const_logic_1;
        else 
            real_spectrum_lo_V_M_real_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_lo_V_M_real_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_219, ap_enable_reg_pp0_iter1, real_spectrum_lo_V_M_real_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_real_V_blk_n <= real_spectrum_lo_V_M_real_V_empty_n;
        else 
            real_spectrum_lo_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    real_spectrum_lo_V_M_real_V_read <= real_spectrum_lo_V_M_real_V0_update;
    tmp_data_1_fu_208_p3 <= (ap_phi_mux_tmp_data_M_imag_V_phi_fu_153_p4 & ap_phi_mux_tmp_data_M_real_V_phi_fu_162_p4);
end behav;
