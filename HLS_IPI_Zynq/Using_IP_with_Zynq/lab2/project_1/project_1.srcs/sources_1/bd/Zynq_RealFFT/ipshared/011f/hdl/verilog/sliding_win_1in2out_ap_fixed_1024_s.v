// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sliding_win_1in2out_ap_fixed_1024_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dout_0_V_din,
        dout_0_V_full_n,
        dout_0_V_write,
        dout_1_V_din,
        dout_1_V_full_n,
        dout_1_V_write,
        start_out,
        start_write,
        din_V_V_TDATA,
        din_V_V_TVALID,
        din_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] dout_0_V_din;
input   dout_0_V_full_n;
output   dout_0_V_write;
output  [15:0] dout_1_V_din;
input   dout_1_V_full_n;
output   dout_1_V_write;
output   start_out;
output   start_write;
input  [15:0] din_V_V_TDATA;
input   din_V_V_TVALID;
output   din_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg dout_0_V_write;
reg dout_1_V_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] tmp_11_fu_266_p3;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    din_V_V_0_vld_out;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] din_V_V_0_data_out;
wire    din_V_V_0_vld_in;
wire    din_V_V_0_ack_in;
reg    din_V_V_0_ack_out;
reg   [15:0] din_V_V_0_payload_A;
reg   [15:0] din_V_V_0_payload_B;
reg    din_V_V_0_sel_rd;
reg    din_V_V_0_sel_wr;
wire    din_V_V_0_sel;
wire    din_V_V_0_load_A;
wire    din_V_V_0_load_B;
reg   [1:0] din_V_V_0_state;
wire    din_V_V_0_state_cmp_full;
reg   [31:0] din_mem_idx;
reg   [9:0] out_start_offset;
wire   [8:0] win_mem_V_1_address0;
reg    win_mem_V_1_ce0;
reg    win_mem_V_1_we0;
reg   [8:0] win_mem_V_1_address1;
reg    win_mem_V_1_ce1;
wire   [15:0] win_mem_V_1_q1;
wire   [8:0] win_mem_V_0_address0;
reg    win_mem_V_0_ce0;
reg    win_mem_V_0_we0;
reg   [8:0] win_mem_V_0_address1;
reg    win_mem_V_0_ce1;
wire   [15:0] win_mem_V_0_q1;
reg    din_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    dout_0_V_blk_n;
reg    dout_1_V_blk_n;
reg   [9:0] i_reg_188;
wire   [0:0] tmp_9_fu_210_p1;
reg   [0:0] tmp_9_reg_370;
reg   [0:0] ap_reg_pp0_iter1_tmp_9_reg_370;
reg   [0:0] ap_reg_pp0_iter2_tmp_9_reg_370;
wire   [9:0] out_idx_fu_214_p2;
reg   [9:0] out_idx_reg_376;
reg   [9:0] ap_reg_pp0_iter1_out_idx_reg_376;
reg   [8:0] newIndex3_reg_381;
reg   [8:0] ap_reg_pp0_iter1_newIndex3_reg_381;
wire   [0:0] tmp_7_fu_230_p2;
wire   [9:0] tmp_10_fu_262_p1;
reg   [9:0] tmp_10_reg_390;
reg   [0:0] tmp_11_reg_395;
reg   [0:0] ap_reg_pp0_iter1_tmp_11_reg_395;
reg   [0:0] ap_reg_pp0_iter2_tmp_11_reg_395;
reg   [0:0] ap_reg_pp0_iter3_tmp_11_reg_395;
wire   [0:0] tmp_6_fu_278_p1;
wire   [15:0] win_mem_V_load_phi_fu_354_p3;
reg   [15:0] win_mem_V_load_phi_reg_423;
wire   [15:0] win_mem_V_load_1_phi_fu_361_p3;
reg   [15:0] win_mem_V_load_1_phi_reg_428;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [9:0] ap_phi_mux_i_phi_fu_192_p6;
wire   [63:0] newIndex2_fu_292_p1;
wire   [63:0] newIndex5_fu_327_p1;
wire   [63:0] newIndex4_fu_348_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] storemerge_fu_310_p3;
wire   [9:0] tmp_9_cast_cast_fu_242_p3;
wire   [0:0] tmp_8_fu_236_p2;
wire   [10:0] i33_cast_fu_202_p1;
wire   [10:0] i_1_fu_256_p2;
wire   [30:0] newIndex1_fu_282_p4;
wire   [0:0] tmp_s_fu_298_p2;
wire   [31:0] tmp_5_fu_304_p2;
wire   [10:0] out_idx_cast_fu_324_p1;
wire   [10:0] tmp_4_fu_332_p2;
wire   [9:0] newIndex_fu_338_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_178;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 din_V_V_0_sel_rd = 1'b0;
#0 din_V_V_0_sel_wr = 1'b0;
#0 din_V_V_0_state = 2'd0;
#0 din_mem_idx = 32'd512;
#0 out_start_offset = 10'd0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

sliding_win_1in2obkb #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
win_mem_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(win_mem_V_1_address0),
    .ce0(win_mem_V_1_ce0),
    .we0(win_mem_V_1_we0),
    .d0(din_V_V_0_data_out),
    .address1(win_mem_V_1_address1),
    .ce1(win_mem_V_1_ce1),
    .q1(win_mem_V_1_q1)
);

sliding_win_1in2obkb #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
win_mem_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(win_mem_V_0_address0),
    .ce0(win_mem_V_0_ce0),
    .we0(win_mem_V_0_we0),
    .d0(din_V_V_0_data_out),
    .address1(win_mem_V_0_address1),
    .ce1(win_mem_V_0_ce1),
    .q1(win_mem_V_0_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_tmp_11_reg_395 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        din_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((din_V_V_0_ack_out == 1'b1) & (din_V_V_0_vld_out == 1'b1))) begin
            din_V_V_0_sel_rd <= ~din_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        din_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((din_V_V_0_ack_in == 1'b1) & (din_V_V_0_vld_in == 1'b1))) begin
            din_V_V_0_sel_wr <= ~din_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        din_V_V_0_state <= 2'd0;
    end else begin
        if ((((din_V_V_0_state == 2'd2) & (din_V_V_0_vld_in == 1'b0)) | ((din_V_V_0_state == 2'd3) & (din_V_V_0_vld_in == 1'b0) & (din_V_V_0_ack_out == 1'b1)))) begin
            din_V_V_0_state <= 2'd2;
        end else if ((((din_V_V_0_state == 2'd1) & (din_V_V_0_ack_out == 1'b0)) | ((din_V_V_0_state == 2'd3) & (din_V_V_0_ack_out == 1'b0) & (din_V_V_0_vld_in == 1'b1)))) begin
            din_V_V_0_state <= 2'd1;
        end else if (((~((din_V_V_0_vld_in == 1'b0) & (din_V_V_0_ack_out == 1'b1)) & ~((din_V_V_0_ack_out == 1'b0) & (din_V_V_0_vld_in == 1'b1)) & (din_V_V_0_state == 2'd3)) | ((din_V_V_0_state == 2'd1) & (din_V_V_0_ack_out == 1'b1)) | ((din_V_V_0_state == 2'd2) & (din_V_V_0_vld_in == 1'b1)))) begin
            din_V_V_0_state <= 2'd3;
        end else begin
            din_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_395 == 1'd0))) begin
        i_reg_188 <= tmp_10_reg_390;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_11_reg_395 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_reg_188 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_newIndex3_reg_381 <= newIndex3_reg_381;
        ap_reg_pp0_iter1_out_idx_reg_376 <= out_idx_reg_376;
        ap_reg_pp0_iter1_tmp_11_reg_395 <= tmp_11_reg_395;
        newIndex3_reg_381 <= {{out_idx_fu_214_p2[9:1]}};
        out_idx_reg_376 <= out_idx_fu_214_p2;
        tmp_11_reg_395 <= i_1_fu_256_p2[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_tmp_11_reg_395 <= ap_reg_pp0_iter1_tmp_11_reg_395;
        ap_reg_pp0_iter3_tmp_11_reg_395 <= ap_reg_pp0_iter2_tmp_11_reg_395;
        win_mem_V_load_1_phi_reg_428 <= win_mem_V_load_1_phi_fu_361_p3;
        win_mem_V_load_phi_reg_423 <= win_mem_V_load_phi_fu_354_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((din_V_V_0_load_A == 1'b1)) begin
        din_V_V_0_payload_A <= din_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((din_V_V_0_load_B == 1'b1)) begin
        din_V_V_0_payload_B <= din_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_mem_idx <= storemerge_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_230_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_start_offset[9] <= tmp_9_cast_cast_fu_242_p3[9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_390 <= tmp_10_fu_262_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_tmp_11_reg_395 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_178)) begin
        if ((tmp_11_reg_395 == 1'd1)) begin
            ap_phi_mux_i_phi_fu_192_p6 = 10'd0;
        end else if ((tmp_11_reg_395 == 1'd0)) begin
            ap_phi_mux_i_phi_fu_192_p6 = tmp_10_reg_390;
        end else begin
            ap_phi_mux_i_phi_fu_192_p6 = i_reg_188;
        end
    end else begin
        ap_phi_mux_i_phi_fu_192_p6 = i_reg_188;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_V_V_0_ack_out = 1'b1;
    end else begin
        din_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((din_V_V_0_sel == 1'b1)) begin
        din_V_V_0_data_out = din_V_V_0_payload_B;
    end else begin
        din_V_V_0_data_out = din_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        din_V_V_TDATA_blk_n = din_V_V_0_state[1'd0];
    end else begin
        din_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dout_0_V_blk_n = dout_0_V_full_n;
    end else begin
        dout_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dout_0_V_write = 1'b1;
    end else begin
        dout_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dout_1_V_blk_n = dout_1_V_full_n;
    end else begin
        dout_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dout_1_V_write = 1'b1;
    end else begin
        dout_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_11_fu_266_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd1)) begin
            win_mem_V_0_address1 = newIndex4_fu_348_p1;
        end else if ((ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd0)) begin
            win_mem_V_0_address1 = newIndex5_fu_327_p1;
        end else begin
            win_mem_V_0_address1 = 'bx;
        end
    end else begin
        win_mem_V_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        win_mem_V_0_ce0 = 1'b1;
    end else begin
        win_mem_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd0)))) begin
        win_mem_V_0_ce1 = 1'b1;
    end else begin
        win_mem_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_6_fu_278_p1 == 1'd0))) begin
        win_mem_V_0_we0 = 1'b1;
    end else begin
        win_mem_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd0)) begin
            win_mem_V_1_address1 = newIndex4_fu_348_p1;
        end else if ((ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd1)) begin
            win_mem_V_1_address1 = newIndex5_fu_327_p1;
        end else begin
            win_mem_V_1_address1 = 'bx;
        end
    end else begin
        win_mem_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        win_mem_V_1_ce0 = 1'b1;
    end else begin
        win_mem_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_9_reg_370 == 1'd0)))) begin
        win_mem_V_1_ce1 = 1'b1;
    end else begin
        win_mem_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_6_fu_278_p1 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        win_mem_V_1_we0 = 1'b1;
    end else begin
        win_mem_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((dout_1_V_full_n == 1'b0) | (dout_0_V_full_n == 1'b0))) | ((din_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((dout_1_V_full_n == 1'b0) | (dout_0_V_full_n == 1'b0))) | ((din_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((dout_1_V_full_n == 1'b0) | (dout_0_V_full_n == 1'b0))) | ((din_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (din_V_V_0_vld_out == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((dout_1_V_full_n == 1'b0) | (dout_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_178 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign din_V_V_0_ack_in = din_V_V_0_state[1'd1];

assign din_V_V_0_load_A = (~din_V_V_0_sel_wr & din_V_V_0_state_cmp_full);

assign din_V_V_0_load_B = (din_V_V_0_state_cmp_full & din_V_V_0_sel_wr);

assign din_V_V_0_sel = din_V_V_0_sel_rd;

assign din_V_V_0_state_cmp_full = ((din_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign din_V_V_0_vld_in = din_V_V_TVALID;

assign din_V_V_0_vld_out = din_V_V_0_state[1'd0];

assign din_V_V_TREADY = din_V_V_0_state[1'd1];

assign dout_0_V_din = win_mem_V_load_phi_reg_423;

assign dout_1_V_din = win_mem_V_load_1_phi_reg_428;

assign i33_cast_fu_202_p1 = ap_phi_mux_i_phi_fu_192_p6;

assign i_1_fu_256_p2 = (11'd2 + i33_cast_fu_202_p1);

assign newIndex1_fu_282_p4 = {{din_mem_idx[31:1]}};

assign newIndex2_fu_292_p1 = newIndex1_fu_282_p4;

assign newIndex4_fu_348_p1 = newIndex_fu_338_p4;

assign newIndex5_fu_327_p1 = ap_reg_pp0_iter1_newIndex3_reg_381;

assign newIndex_fu_338_p4 = {{tmp_4_fu_332_p2[10:1]}};

assign out_idx_cast_fu_324_p1 = ap_reg_pp0_iter1_out_idx_reg_376;

assign out_idx_fu_214_p2 = (out_start_offset + ap_phi_mux_i_phi_fu_192_p6);

assign start_out = real_start;

assign storemerge_fu_310_p3 = ((tmp_s_fu_298_p2[0:0] === 1'b1) ? 32'd0 : tmp_5_fu_304_p2);

assign tmp_10_fu_262_p1 = i_1_fu_256_p2[9:0];

assign tmp_11_fu_266_p3 = i_1_fu_256_p2[32'd10];

assign tmp_4_fu_332_p2 = (11'd1 + out_idx_cast_fu_324_p1);

assign tmp_5_fu_304_p2 = (32'd1 + din_mem_idx);

assign tmp_6_fu_278_p1 = din_mem_idx[0:0];

assign tmp_7_fu_230_p2 = ((ap_phi_mux_i_phi_fu_192_p6 == 10'd1022) ? 1'b1 : 1'b0);

assign tmp_8_fu_236_p2 = ((out_start_offset == 10'd0) ? 1'b1 : 1'b0);

assign tmp_9_cast_cast_fu_242_p3 = ((tmp_8_fu_236_p2[0:0] === 1'b1) ? 10'd512 : 10'd0);

assign tmp_9_fu_210_p1 = out_start_offset[0:0];

assign tmp_s_fu_298_p2 = ((din_mem_idx == 32'd1023) ? 1'b1 : 1'b0);

assign win_mem_V_0_address0 = newIndex2_fu_292_p1;

assign win_mem_V_1_address0 = newIndex2_fu_292_p1;

assign win_mem_V_load_1_phi_fu_361_p3 = ((ap_reg_pp0_iter2_tmp_9_reg_370[0:0] === 1'b1) ? win_mem_V_0_q1 : win_mem_V_1_q1);

assign win_mem_V_load_phi_fu_354_p3 = ((ap_reg_pp0_iter2_tmp_9_reg_370[0:0] === 1'b1) ? win_mem_V_1_q1 : win_mem_V_0_q1);

always @ (posedge ap_clk) begin
    out_start_offset[8:0] <= 9'b000000000;
    tmp_9_reg_370 <= 1'b0;
    ap_reg_pp0_iter1_tmp_9_reg_370 <= 1'b0;
    ap_reg_pp0_iter2_tmp_9_reg_370 <= 1'b0;
end

endmodule //sliding_win_1in2out_ap_fixed_1024_s
